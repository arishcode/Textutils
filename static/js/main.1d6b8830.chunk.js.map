{"version":3,"sources":["components/Navbar.js","components/Alert.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","Prototypes","PropTypes","string","isRequired","aboutText","defaultProps","Alert","alert","class","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","TextForm","useState","Text","setText","style","color","heading","value","backgroundColor","onChange","event","target","rows","newtext","showAlert","replace","c","split","length","App","setMode","setAlert","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1d6b8830.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\n\r\nexport default function Navbar(props) {\r\n  // const handleRdClick = ()=>{\r\n  //   document.body.style.backgroundColor = 'success'\r\n  // }\r\n\r\n  // const handleOnChange = (document)=>{\r\n  //   document.body.style.backgroundColor(document.target.value)\r\n  // }\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode} `}>\r\n        <div className=\"container-fluid\" >\r\n        {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n        <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              {/* <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link> */}\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              {/* <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a> */}\r\n              {/* <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link> */}\r\n            </li>\r\n          </ul>\r\n          {/* <form className=\"d-flex\">\r\n            <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n            <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n          </form> */}\r\n          {/* <div class=\"form-check form-switch mx-3\">\r\n            <input class=\"form-check-input\" type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n            <label class=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Red Mode</label>\r\n          </div> */}\r\n          <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\r\n          <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n          <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n    )\r\n}\r\n\r\nNavbar.Prototypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  title: 'Set title here',\r\n  aboutText: 'About'\r\n}","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize =(word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React,{useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        // console.log(\"Uppercase was clicked :\" + Text)\r\n        let newtext = Text.toUpperCase()\r\n        setText(newtext)\r\n        props.showAlert(\"Converted to Uppercase\", \"success\")\r\n    }\r\n    const handleLoClick = ()=>{\r\n        // console.log(\"Uppercase was clicked :\" + Text)\r\n        let newtext = Text.toLowerCase()\r\n        setText(newtext)\r\n        props.showAlert(\"Converted to Lowercase\", \"success\")\r\n    }\r\n    const handleClearClick = ()=>{\r\n        // console.log(\"Uppercase was clicked :\" + Text)\r\n        let newtext = '';\r\n        setText(newtext)\r\n    }\r\n    const handleCapitalClick = ()=>{\r\n        // console.log(\"Uppercase was clicked :\" + Text)\r\n        let newtext = Text.replace(/^\\w/, (c) => c.toUpperCase());\r\n        setText(newtext)\r\n        props.showAlert(\"Converted to Capitalize\", \"success\")\r\n    }\r\n\r\n    const handleOnChange = (event)=>{\r\n        // console.log(\"On Change\")\r\n        setText(event.target.value)\r\n    }\r\n    \r\n    const [Text, setText] = useState('Enter text here');\r\n    // Text = \"new text\"; // Wrong way to change the state\r\n    // setText(\"new text\") // Correct way to change the state\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode ==='dark'?'white':'black'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n            <textarea className=\"form-control\" value={Text} style={{backgroundColor: props.mode ==='dark'?'grey':'white', color: props.mode ==='dark'?'white':'black'}} onChange={handleOnChange} id=\"mybox\" rows=\"5\"></textarea>\r\n            </div>\r\n            <button className= \"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className= \"btn btn-primary mx-1 my-1\" onClick={handleLoClick}>Convert to Lowercase</button>\r\n            <button className= \"btn btn-primary mx-1 my-1\" onClick={handleCapitalClick}>Convert to Capitalize</button>\r\n            <button className= \"btn btn-primary mx-1 my-1\" onClick={handleClearClick}>Clear Text</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode ==='dark'?'white':'black'}}>\r\n            <h2>Your text summary</h2>\r\n            <p>{Text.split(\" \").length} Words {Text.length} Characters</p>\r\n            <p>{0.008 * Text.split(\" \").length} Minutes to read</p>\r\n            <h2>Preview</h2>\r\n            <p>{Text.length>0?Text:\"Enter something in the textbox above to preview it here\"}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport Alert from './components/Alert';\nimport TextForm from './components/TextForm';\n// import About from './components/About';\nimport React, { useState } from 'react'\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route\n// } from \"react-router-dom\";\n\n\nfunction App() {\n  const [mode, setMode] = useState('light'); // Whether dark mode is enabled or disabled\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=>{\n    setAlert({\n      msg: message,\n      type:type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 1500);\n  }\n  const toggleMode = ()=>{\n    if (mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n      // document.title = \"TextUtils - Dark Mode\"\n      // setTimeout(() => {\n      //   document.title= \"TextUtils is Amazing Mode\"\n      // }, 2000);\n    }\n\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\")\n      // document.title = \"TextUtils - Light Mode\"\n      // setTimeout(() => {\n      //   document.title= \"Install TextUtils Now\"\n      // }, 1500);\n    }\n  }\n  return (\n    <>\n    {/* <Navbar title=\"TextUtils\" aboutText=\"About Us\"/> */}\n    {/* <Navbar/> */}\n    {/* <Router> */}\n    <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode}/>\n    <Alert alert={alert}/>\n    <div className=\"container my-3\">\n    {/* <Switch> */}\n        {/* <Route exact path=\"/about\">\n          <About/>\n        </Route>\n        <Route exact path=\"/\"> */}\n          <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\" mode={mode}/>\n        {/* </Route> */}\n    {/* </Switch> */}\n    </div>\n    {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}